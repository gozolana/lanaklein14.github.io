<html>
<head>
    <meta charset="utf-8" />
    <title></title>
    <style>

        /*
            表示設定 (1)
        */

        * {
            /* フォント （一部のフォントは上手く適用されない） */
            font-family: "Meiryo";
            font-size: 12px;
        }

        body, html {
            margin: 0;
        }

        html {
            height: 100%;
            
            /* 背景色 */
            background-color: transparent;
        }

        .resizeHandle {
            /* リサイズ用のハンドル
             * リサイズができる場所はウィンドウ右下の16x16ピクセルの場所
             * この部分が完全に透明だとマウス入力が透過してしまってサイズを変更できなくなる */
            background-image: url(handle.png);
            background-position: bottom right;
            background-repeat: no-repeat;
            box-sizing: border-box;
        }

        pre {
            word-break: break-all;
            white-space: pre-wrap;
            background: rgba(0, 0, 0, 0.7);
            color: #fff;
            padding: 5px;
            font: 14px monospace;
        }

        canvas {
            background: rgba(0.5, 0.5, 0.5, 0.7);
        }
    </style>
    <script src="https://ngld.github.io/OverlayPlugin/assets/shared/common.min.js"></script>
    <script>
        document.addEventListener("onOverlayStateUpdate", function (e) {
            if (!e.detail.isLocked) {
                displayResizeHandle();
            } else {
                hideResizeHandle();
            }
        });

        function displayResizeHandle() {
            document.documentElement.classList.add("resizeHandle");
        }

        function hideResizeHandle() {
            document.documentElement.classList.remove("resizeHandle");
        }

        class Room {
            constructor(left, top, right, bottom) {
                this.left = left;
                this.top = top;
                this.right = right;
                this.bottom = bottom;
            }
            draw(ctx, poss) {
                const idx = poss.findIndex(p=>{
                    return (this.left < p.PosX && p.PosX < this.right && 
                        this.top < p.PosY && p.PosY < this.bottom);
                });
                ctx.fillStyle = idx>=0 ? "#FFFFFF88" : "#88888888";
                ctx.fillRect(this.left, this.top, this.right-this.left, this.bottom-this.top);
            }

        }

        var rooms = [
            new Room(-306, 163, -270, 206),
            new Room(-388, 396, -345, 432),
            new Room(-375, 340, -337, 376),
            new Room(-427, 340, -389, 376),
            new Room(400, -272, 437, -236),
            new Room(-393, 170, -357, 206),
            new Room(-419, 227, -383, 261),
            new Room(166, -318, 202, -282),
            new Room(-325, -245, -275, -195),
            new Room(-318, -326, -282, -288),
            new Room(-338, 398, -302, 433),
            new Room(412, -330, 448, -294),
            new Room(360, -214, 395, -178),
            new Room(-252, 352, -218, 385),
            new Room(-241, 409, -205, 444),
            new Room(351, -362, 385, -328),
            new Room(347, -316, 389, -282),
            new Room(351, -272, 385, -236),
            new Room(225, -305, 259, -270),
            new Room(225, -259, 259, -225),
            new Room(225, -204, 259, -162),
            new Room(283, -259, 317, -225),
            new Room(409, -382, 443, -339),
            new Room(370, -422, 406, -386),
            new Room(-197, 352, -163, 388),
            new Room(-317, 341, -283, 376),
            new Room(-317, 279, -283, 320),
            new Room(-240, 184, -205, 217),
            new Room(-252, 239, -218, 273),
            new Room(-317, 227, -283, 261),
            new Room(-372, 227, -338, 261),
            new Room(-201, 238, -156, 274),
            new Room(283, -317, 317, -282),
            new Room(295, -375, 329, -340),
            new Room(-199, 292, -163, 335),
            new Room(-253, 297, -217, 331),
            new Room(301, -201, 336, -167),
            new Room(166, -248, 204, -213),
            new Room(235, -363, 271, -327),
            new Room(224, -422, 260, -384),
            new Room(181, -363, 217, -327),
            new Room(270, -432, 317, -397),
            new Room(-384, 283, -350, 317)
        ]

        var scale = 1.2;
        var imgTresureB = new Image();
        imgTresureB.src = 'https://raw.githubusercontent.com/lanaklein14/lanaklein14.github.io/master/images/tresureB.svg';
        var imgTresureR = new Image();
        imgTresureR.src = 'https://raw.githubusercontent.com/lanaklein14/lanaklein14.github.io/master/images/tresureR.svg';
        var imgKey = new Image();
        imgKey.src = 'https://raw.githubusercontent.com/lanaklein14/lanaklein14.github.io/master/images/key.svg';
        var imgRaise = new Image();
        imgRaise.src = 'https://raw.githubusercontent.com/lanaklein14/lanaklein14.github.io/master/images/raise.svg';
        var count = 0;
        // CombatData イベントを購読
        addOverlayListener("onAddonExampleEmbeddedTimerFiredEvent", (e) => {
//            document.querySelector("#encounter").innerText = JSON.stringify(e, null, 4);
            var canvas = document.getElementById('canvas');
            if (canvas.getContext) {

                var self = e.self;

                var poss = e.mobs.map(m=>{return {PosX:m.PosX, PosY:m.PosY}});
                poss = poss.concat(e.place.map(m=>{return {PosX:m.PosX, PosY:m.PosY}}));
                poss = poss.concat(e.tresures.map(m=>{return {PosX:m.PosX, PosY:m.PosY}}));

                var ctx = canvas.getContext('2d');

                ctx.clearRect(0,0,canvas.width,canvas.height);

                ctx.save();
                ctx.beginPath();
                ctx.translate(canvas.width/2, canvas.height/2);
                ctx.scale(scale, scale);
                ctx.fillStyle = "#FFFFFF44";
                ctx.fillRect(-110, -110, 220, 220);
                ctx.fillStyle = "#00FF0044";
                ctx.arc(0, 0, 50, 0+0.8-self.Heading, Math.PI-0.8-self.Heading);
                ctx.lineTo(0,0);
                ctx.fill();
                ctx.closePath();
                ctx.restore();

                ctx.save();
                ctx.beginPath();
                ctx.translate(canvas.width/2, canvas.height/2);
                ctx.scale(scale, scale);
                ctx.translate(-self.PosX, -self.PosY);
                ctx.fillStyle = "#FFFFFF88";
                rooms.forEach(r => {
                    r.draw(ctx, poss);
                })

                ctx.restore();

                e.mobs.filter(m=>{return m.HPP > 0.0}).forEach(m => {
                    var x = m.PosX - self.PosX;
                    var y = m.PosY - self.PosY;
                    ctx.save();
                    ctx.fillStyle = "#FF000044";
                    ctx.beginPath();
                    ctx.translate(canvas.width/2, canvas.height/2);
                    ctx.scale(scale, scale);
                    ctx.arc(x, y, 4, 0, Math.PI*2, 0);
                    ctx.fill();
                    ctx.translate(-150, -150);
                    ctx.closePath();
                    ctx.restore();
                });

                e.place.forEach(m => {
                    var x = m.PosX - self.PosX;
                    var y = m.PosY - self.PosY;
                    ctx.save();
                    ctx.fillStyle = "#0000FFAA";
                    ctx.beginPath();
                    ctx.translate(canvas.width/2, canvas.height/2);
                    ctx.scale(scale, scale);
                    if (m.BNpcID == 2007188) {
                        ctx.drawImage(imgKey, x-5, y-5, 10, 10);
                    }
                    else {
                        ctx.drawImage(imgRaise, x-5, y-5, 10, 10);
                    }
                    ctx.translate(-150, -150);
                    ctx.closePath();
                    ctx.restore();
                });

                e.tresures.forEach(m => {
                    var x = m.PosX - self.PosX;
                    var y = m.PosY - self.PosY;
                    ctx.save();
                    ctx.fillStyle = "#00FF00AA";
                    ctx.beginPath();
                    ctx.translate(canvas.width/2, canvas.height/2);
                    ctx.scale(scale, scale);
                    if (m.BNpcID == 2007357) {
                        ctx.drawImage(imgTresureB, x-5, y-5, 10, 10);
                    }
                    else {
                        ctx.drawImage(imgTresureR, x-5, y-5, 10, 10);
                    }
                    ctx.translate(-150, -150);
                    ctx.closePath();
                    ctx.restore();
                });

            }
        });

        startOverlayEvents();

    </script>
</head>
<body>

        <canvas id="canvas" width="300" height="300">
            No data to show.
        </canvas>
    <!--pre id="encounter">
    </pre-->

</body>
</html>