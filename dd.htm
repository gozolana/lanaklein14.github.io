<html>
<head>
    <meta charset="utf-8" />
    <title></title>
    <style>

        /*
            表示設定 (1)
        */

        * {
            /* フォント （一部のフォントは上手く適用されない） */
            font-family: "Meiryo";
            font-size: 12px;
        }

        body, html {
            margin: 0;
        }

        html {
            height: 100%;
            
            /* 背景色 */
            background-color: transparent;
        }

        .resizeHandle {
            /* リサイズ用のハンドル
             * リサイズができる場所はウィンドウ右下の16x16ピクセルの場所
             * この部分が完全に透明だとマウス入力が透過してしまってサイズを変更できなくなる */
            background-image: url(handle.png);
            background-position: bottom right;
            background-repeat: no-repeat;
            box-sizing: border-box;
        }

        #ddFooter, pre, #traplist {
            word-break: break-all;
            white-space: pre-wrap;
            background: rgba(0, 0, 0, 0.7);
            color: #fff;
            padding: 5px;
            font: 14px monospace;
        }

        canvas {
            background: rgba(0.5, 0.5, 0.5, 0.7);
        }

        #ddHeader {
            font-family: "Helvetica Neue",
                Arial,
                "Hiragino Kaku Gothic ProN",
                "Hiragino Sans",
                Meiryo,
                sans-serif;
            font-size: 20px;
            color: #ffffff;
            padding: 3px;
            background: rgba(0, 0, 255, 1.0);
        }
        #ddHeader.passageok {
            background: rgba(255, 0, 0, 1.0);
        }

    </style>
    <script src="https://ngld.github.io/OverlayPlugin/assets/shared/common.min.js"></script>
    <script>

        class Room {
            constructor(left, top, right, bottom, label) {
                this.width = right - left;
                this.height = bottom - top;
                this.left = left;
                this.top = top;
                this.right = right;
                this.bottom = bottom;
                this.isActive = false;
                this.label = label
            }
            draw(ctx, poss) {
                const idx = poss.findIndex(p=>{
                    return (this.left < p.PosX && p.PosX < this.right && 
                        this.top < p.PosY && p.PosY < this.bottom);
                });
                if (idx>=0) {
                    this.isActive = true;
                }
                ctx.fillStyle = this.isActive ? 
                "rgba(" + [200, 200, 150, 0.30] + ")":
                "rgba(" + [128, 128, 255, 0.10] + ")";
                ctx.fillRect(this.left, this.top, this.right-this.left, this.bottom-this.top);
                ctx.font = "8px Arial";
                ctx.fillText(this.label ? this.label : '', this.left, this.top-1);
            }
        }
        class DDManager {
            constructor() {
                this.inDD = false;
                this.floor = 0;
                this.countKill = 0;
                this.passageOk = false;
                this.zoneID = 0;
                this.rooms = [
                    new Room(224, -422, 260, -384, 'A1'),
                    new Room(270, -432, 317, -397, 'A2'),
                    new Room(370, -422, 406, -386, 'A3'),
                    new Room(181, -363, 217, -327, 'A4'),
                    new Room(235, -363, 271, -327, 'A5'),
                    new Room(295, -375, 329, -340, 'A6'),
                    new Room(351, -362, 385, -328, 'A7'),
                    new Room(409, -382, 443, -339, 'A8'),
                    new Room(166, -318, 202, -282, 'A9'),
                    new Room(225, -305, 259, -270, 'A10'),
                    new Room(283, -317, 317, -282, 'A11'),
                    new Room(347, -316, 389, -282, 'A12'),
                    new Room(412, -330, 448, -294, 'A13'),
                    new Room(166, -248, 204, -213, 'A14'),
                    new Room(225, -259, 259, -225, 'A15'),
                    new Room(283, -259, 317, -225, 'A16'),
                    new Room(351, -272, 385, -236, 'A17'),
                    new Room(400, -272, 437, -236, 'A18'),
                    new Room(225, -204, 259, -162, 'A19'),
                    new Room(301, -201, 336, -167, 'A20'),
                    new Room(360, -214, 395, -178, 'A21'),

                    new Room(-306, 163, -270, 206, 'B1'),
                    new Room(-393, 170, -357, 206, 'B2'),
                    new Room(-240, 184, -205, 217, 'B3'),
                    new Room(-419, 227, -383, 261, 'B4'),
                    new Room(-372, 227, -338, 261, 'B5'),
                    new Room(-317, 227, -283, 261, 'B6'),
                    new Room(-252, 239, -218, 273, 'B7'),
                    new Room(-201, 238, -156, 274, 'B8'),
                    new Room(-438, 281, -396, 317, 'B9'),
                    new Room(-384, 283, -350, 317, 'B10'),
                    new Room(-317, 279, -283, 320, 'B11'),
                    new Room(-253, 297, -217, 331, 'B12'),
                    new Room(-199, 292, -163, 335, 'B13'),
                    new Room(-427, 340, -389, 376, 'B14'),
                    new Room(-375, 340, -337, 376, 'B15'),
                    new Room(-317, 341, -283, 376, 'B16'),
                    new Room(-252, 352, -218, 385, 'B17'),
                    new Room(-197, 352, -163, 388, 'B18'),
                    new Room(-388, 396, -345, 432, 'B19'),
                    new Room(-338, 398, -302, 433, 'B20'),
                    new Room(-241, 409, -205, 444, 'B21'),

                    new Room(-318, -326, -282, -288, 'C1'),
                    new Room(-325, -245, -275, -195, 'C2'),

                    new Room(284, 288, 315, 317, 'D1'),
                    new Room(275, 349, 324, 398, 'D1'),
                    
                    new Room(-123, 81, -78, 118, 'E1'),
                ];
                this.trapPredictions = [];
            }

            updateHeader() {
                const header = document.querySelector('#ddHeader');
                if (this.inDD) {
                    let textOk = ''
                    if (this.passageOk) {
                        textOk = ' - 転移OK';
                        header.classList.add('passageok');
                    }
                    else {
                        header.classList.remove('passageok');
                    }
                    header.textContent = `死者の宮殿 B${this.floor}F:${this.countKill}${textOk}`
                }
                else {
                    header.textContent = `死者の宮殿の外 (Zone:${this.zoneID})`;
                }
            }

            isDangerMob(bnpcNameID) {
                // モブ名⇒ID https://xivapi.com/search?indexes=BnpcName&string_column=Name_ja&string_algo=term&columns=ID,Name_ja&string=%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%91%E3%83%AC%E3%82%B9%E3%83%BB%E3%82%AD%E3%83%BC%E3%83%91%E3%83%BC
                const dangerMobNameIDMap = {
                    561: [ //B1 - B10
                        4983, //パレス・ジズ
                        4984, //ロストゴブリン
                        4985, //パレス・ダングビートル
                    ],
                    562: [ //B11 - B20
                        4996, //パレス・プリン
                        4997, //パレス・コブラ
                        4998, //パレス・ビロコ
                    ],
                    563: [ //B21 - B30
                        5009, //パレス・デュラハン
                        5010, //パレス・ミノタウロス
                        5011, //パレス・スカネテ
                    ],
                    564: [ //B31 - B40
                        5022, //ナイトメア・サキュバス
                        5023, //ナイトメア・カトブレパス
                        5024, //パレス・グルマン
                    ],
                    565: [ //B41 - B50
                        5035, //パレス・マンティコア
                        5354, //パレス・レイス
                        5355, //パレス・グレイブキーパー
                    ],
                    593: [ //B51 - B60
                        5302, //パレス・アヌビス
                        5307, //パレス・マナアイドル
                        5305, //パレス・アークデーモン
                    ],
                    594: [ //B61 - B70
                        5317, //パレス・エルブスト
                        5319, //パレス・ブレードビネガロン
                        5316, //パレス・ミロドン
                    ],
                    595: [ //B71 - B80
                        5331, //パレス・アンズー
                        5325, //パレス・サイクロプス
                        5324, //バード・オブ・パレス
                    ],
                    596: [ //B81 - B90
                        5343, //パレス・ワモーラ
                        5342, //パレス・ハパリット
                        5344, //パレス・キマイラ
                    ],
                    597: [ //B91 - B100
                        5354, //パレス・レイス
                        5353, //パレス・アイアンコース
                        5355, //パレス・グレイブキーパー
                    ],
                    598: [ //B101 - B110
                        5368, //ディープパレス・ジズ
                        5369, //ゴブリン・アドベンチャラー
                        5370, //ディープパレス・ダングビートル
                    ],
                    599: [ //B111 - B120
                        5374, //ディープパレス・ギガントード
                        5382, //ディープパレス・コブラ
                        5383, //ディープパレス・ビロコ
                    ],
                    600: [ //B121 - B130
                        5394, //ディープパレス・デュラハン
                        5395, //ディープパレス・ミノタウルス
                        5396, //ディープパレス・スカネテ
                    ],
                    601: [ //B131 - B140
                        5409, //ディープパレス・グルマン
                        5402, //ディープパレス・アーリマン
                        5408, //ディープパレス・カトブレパス
                    ],
                    602: [ //B141 - B150
                        5421, //ディープパレス・マンティコア
                        5422, //ディープパレス・レイス
                        5423, //ディープパレス・キーパー
                    ],
                    603: [ //B151 - B160
                        5432, //ディープパレス・シュワブチ
                        5436, //ディープパレス・マロリス
                        5434, //ディープパレス・アークデーモン
                    ],
                    604: [ //B161 - B170
                        5445, //ディープパレス・トゥルスス
                        5447, //ディープパレス・ビネガロン
                        5448, //ディープパレス・プテラノドン
                    ],
                    605: [ //B171 - B180
                        5453, //ディープパレス・スノウクロプス
                        5451, //ディープパレス・ウィセント
                        5452, //バード・オブ・ディープパレス
                    ],
                    606: [ //B181 - B190
                        5469, //ディープパレス・ワモーラ
                        5470, //ディープパレス・ガルム
                        5468, //ディープパレス・ヴィンドスルス
                    ],
                    607: [ //B191 - B200
                        5475, //ディープパレス・アイアンコース
                        5473, //ディープパレス・ファハン
                        5423, //ディープパレス・キーパー
                    ]
                }
                return dangerMobNameIDMap[this.zoneID] ? dangerMobNameIDMap[this.zoneID].includes(bnpcNameID) : false;
            }
            isMimic(bnpcNameID) {
                return bnpcNameID == 2566; //ミミック
            }
            isPygmaioi(bnpcNameID) {
                return bnpcNameID == 5041; //ピグマイオイ
            }
        }
        let ddManager = new DDManager();

        
        document.addEventListener("onOverlayStateUpdate", function (e) {
            if (!e.detail.isLocked) {
                displayResizeHandle();
            } else {
                hideResizeHandle();
            }
        });

        function displayResizeHandle() {
            document.documentElement.classList.add("resizeHandle");
        }

        function hideResizeHandle() {
            document.documentElement.classList.remove("resizeHandle");
        }

        var scale = 1.2;
        var imgCairnOfPassage = new Image();
        var imgCairnOfReturn = new Image();
        var imgTresureGold = new Image();
        var imgTresureSilver = new Image();
        var imgTresureBronze = new Image();
        imgCairnOfPassage.src = 'https://raw.githubusercontent.com/lanaklein14/lanaklein14.github.io/master/images/cairnOfPassage.png';
        imgCairnOfReturn.src = 'https://raw.githubusercontent.com/lanaklein14/lanaklein14.github.io/master/images/cairnOfReturn.png';
        imgTresureGold.src = 'https://raw.githubusercontent.com/lanaklein14/lanaklein14.github.io/master/images/treasureGold.png';
        imgTresureSilver.src = 'https://raw.githubusercontent.com/lanaklein14/lanaklein14.github.io/master/images/treasureSilver.png';
        imgTresureBronze.src = 'https://raw.githubusercontent.com/lanaklein14/lanaklein14.github.io/master/images/treasureBronze.png';
        var count = 0;
        // CombatData イベントを購読
        addOverlayListener("onAddonExampleEmbeddedTimerFiredEvent", (e) => {
            showtraplist(e.traps);
            //document.querySelector("#encounter").innerText = JSON.stringify(e, null, 4);
            var canvas = document.getElementById('canvas');
            if (canvas.getContext) {

                var self = e.self;

                var poss = e.mobs.map(m=>{return {PosX:m.PosX, PosY:m.PosY}});
                poss = poss.concat(e.treasuresGold.map(m=>{return {PosX:m.PosX, PosY:m.PosY}}));
                poss = poss.concat(e.treasuresSilver.map(m=>{return {PosX:m.PosX, PosY:m.PosY}}));
                poss = poss.concat(e.treasuresBronze.map(m=>{return {PosX:m.PosX, PosY:m.PosY}}));
                if (e.self) {
                    poss.push({PosX:self.PosX, PosY:self.PosY});
                }
                if (e.cairnOfPassage) {
                    poss.push({PosX:e.cairnOfPassage.PosX, PosY:e.cairnOfPassage.PosY});
                }
                if (e.cairnOfReturn) {
                    poss.push({PosX:e.cairnOfReturn.PosX, PosY:e.cairnOfReturn.PosY});
                }

                var ctx = canvas.getContext('2d');

                ctx.clearRect(0,0,canvas.width,canvas.height);
                ctx.fillStyle = "rgba(" + [128, 128, 255, 0.05] + ")";
                ctx.fillRect(0,0,canvas.width,canvas.height);

                ctx.save();
                ctx.beginPath();
                ctx.translate(canvas.width/2, canvas.height/2);
                ctx.scale(scale, scale);
                ctx.fillStyle = "rgba(" + [0, 0, 255, 0.15] + ")";
                ctx.fillRect(-110, -110, 220, 220);
                ctx.fillStyle = "rgba(" + [255, 255, 64, 0.30] + ")";
                ctx.arc(0, 0, 30, 0+1.0-self.Heading, Math.PI-1.0-self.Heading);
                ctx.lineTo(0,0);
                ctx.fill();
                ctx.closePath();
                ctx.restore();

                ctx.save();
                ctx.beginPath();
                ctx.translate(canvas.width/2, canvas.height/2);
                ctx.scale(scale, scale);
                ctx.translate(-self.PosX, -self.PosY);
                ddManager.rooms.forEach(r => {
                    r.draw(ctx, poss);
                })

                ctx.restore();

                e.mobs.filter(m=>{return m.HPP > 0.0}).forEach(m => {
                    var x = m.PosX - self.PosX;
                    var y = m.PosY - self.PosY;
                    ctx.save();
                    if (ddManager.isMimic(m.BNpcNameID)) {
                        ctx.beginPath();
                        ctx.translate(canvas.width/2, canvas.height/2);
                        ctx.scale(scale, scale);
                        ctx.lineWidth = 3;
                        ctx.strokeStyle = "rgba(" + [255, 135, 15, 1.0] + ")";
                        ctx.moveTo(x,y-5);
                        ctx.lineTo(x,y+1);
                        ctx.moveTo(x,y+3);
                        ctx.lineTo(x,y+5);
                        ctx.stroke();
                        ctx.closePath();
                    }
                    else if (ddManager.isPygmaioi(m.BNpcNameID)) {
                        ctx.beginPath();
                        ctx.translate(canvas.width/2, canvas.height/2);
                        ctx.scale(scale, scale);
                        ctx.lineWidth = 3;
                        ctx.strokeStyle = "rgba(" + [181, 88, 231, 1.0] + ")";
                        ctx.moveTo(x,y-5);
                        ctx.lineTo(x,y+1);
                        ctx.moveTo(x,y+3);
                        ctx.lineTo(x,y+5);
                        ctx.stroke();
                        ctx.closePath();
                    }
                    else if (ddManager.isDangerMob(m.BNpcNameID)) {
                        ctx.translate(canvas.width/2, canvas.height/2);
                        ctx.scale(scale, scale);
                        ctx.translate(x, y);
                        ctx.beginPath();
                        ctx.fillStyle = "rgba(" + [255, 0, 0, 0.5] + ")";
                        ctx.arc(0, 0, 12, 0+1.0-m.Heading, Math.PI-1.0-m.Heading);
                        ctx.lineTo(0,0);
                        ctx.fill();
                        ctx.closePath();
                        ctx.beginPath();
                        ctx.fillStyle = "rgba(" + [255, 0, 0, 1.0] + ")";
                        ctx.arc(0, 0, 6, 0, Math.PI*2, 0);
                        ctx.fill();
                        ctx.closePath();
                    }
                    else {
                        ctx.beginPath();
                        ctx.translate(canvas.width/2, canvas.height/2);
                        ctx.scale(scale, scale);
                        ctx.fillStyle = "rgba(" + [0, 255, 0, 1.0] + ")";
                        ctx.arc(x, y, 2, 0, Math.PI*2, 0);
                        ctx.fill();
                        ctx.closePath();
                    }

                    ctx.restore();
                });

                e.traps.filter(t=>{return t.PosX != 0.0}).forEach(m => {
                    var x = m.PosX - self.PosX;
                    var y = m.PosY - self.PosY;
                    ctx.save();
                    ctx.beginPath();
                    ctx.translate(canvas.width/2, canvas.height/2);
                    ctx.scale(scale, scale);
                    ctx.strokeStyle = "#000000AA";
                    ctx.moveTo(x-2,y-2);
                    ctx.lineTo(x+2,y+2);
                    ctx.moveTo(x+2,y-2);
                    ctx.lineTo(x-2,y+2);
                    ctx.stroke();
                    ctx.closePath();
                    ctx.restore();
                });

                if (e.cairnOfPassage) {
                    var x = e.cairnOfPassage.PosX - self.PosX;
                    var y = e.cairnOfPassage.PosY - self.PosY;
                    ctx.save();
                    ctx.beginPath();
                    ctx.translate(canvas.width/2, canvas.height/2);
                    ctx.scale(scale, scale);
                    ctx.drawImage(imgCairnOfPassage, x-5, y-5, 10, 10);
                    ctx.closePath();
                    ctx.restore();
                }

                if (e.cairnOfReturn) {
                    var x = e.cairnOfReturn.PosX - self.PosX;
                    var y = e.cairnOfReturn.PosY - self.PosY;
                    ctx.save();
                    ctx.beginPath();
                    ctx.translate(canvas.width/2, canvas.height/2);
                    ctx.scale(scale, scale);
                    ctx.drawImage(imgCairnOfReturn, x-5, y-5, 10, 10);
                    ctx.closePath();
                    ctx.restore();
                }

                e.treasuresGold.forEach(m => {
                    var x = m.PosX - self.PosX;
                    var y = m.PosY - self.PosY;
                    ctx.save();
                    ctx.beginPath();
                    ctx.translate(canvas.width/2, canvas.height/2);
                    ctx.scale(scale, scale);
                    ctx.drawImage(imgTresureGold, x-5, y-5, 10, 10);
                    ctx.closePath();
                    ctx.restore();
                });

                e.treasuresSilver.forEach(m => {
                    var x = m.PosX - self.PosX;
                    var y = m.PosY - self.PosY;
                    ctx.save();
                    ctx.beginPath();
                    ctx.translate(canvas.width/2, canvas.height/2);
                    ctx.scale(scale, scale);
                    ctx.drawImage(imgTresureSilver, x-5, y-5, 10, 10);
                    ctx.closePath();
                    ctx.restore();
                });

                e.treasuresBronze.forEach(m => {
                    var x = m.PosX - self.PosX;
                    var y = m.PosY - self.PosY;
                    ctx.save();
                    ctx.beginPath();
                    ctx.translate(canvas.width/2, canvas.height/2);
                    ctx.scale(scale, scale);
                    ctx.drawImage(imgTresureBronze, x-5, y-5, 10, 10);
                    ctx.closePath();
                    ctx.restore();
                });

            }
            
            document.querySelector("#ddFooter").textContent = 
            `不明なトラップの数：${e.traps.filter(t=>{return t.PosX == 0.0}).length} (X:${Math.floor(self.PosX)}, Y:${Math.floor(self.PosY)})`
        });

        addOverlayListener("ChangeZone", (e) => {
            ddManager.zoneID = e.zoneID;
            if ([561, 562, 563, 564, 565, 593, 594, 595, 596, 597,
                 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 570].includes(ddManager.zoneID)) {
                ddManager.inDD = true;
                ddManager.floor = 0;
                ddManager.countKill = 0;
                ddManager.passageOk = false;
                ddManager.trapPredictions = [];
            }
            else {
                ddManager.inDD = false;
                ddManager.floor = 0;
                ddManager.countKill = 0;
                ddManager.passageOk = false;
                ddManager.trapPredictions = [];
            }
            ddManager.updateHeader();
        });

        addOverlayListener("LogLine", (e) => {
            if (e.line[0] == '00' && e.line[2] == '0839') {
                var result1 = new RegExp('「死者の宮殿 B(.+)～.+」の攻略を開始した。').exec(e.line[4]);
                var result2 = new RegExp('地下(.+)階').exec(e.line[4])
                var result3 = new RegExp('転移の石塔が起動した！').exec(e.line[4]);

                if (result1) {
                    ddManager.floor = parseInt(result1[1], 10);
                    ddManager.countKill = 0;
                    ddManager.passageOk = false;
                    ddManager.rooms.forEach(r => {r.isActive = false});
                }
                else if (result2) {
                    ddManager.floor = parseInt(result2[1], 10);
                    ddManager.countKill = 0;
                    ddManager.passageOk = false;
                    ddManager.rooms.forEach(r => {r.isActive = false});
                }
                else if (result3) {
                    ddManager.passageOk = true;
                }
                ddManager.updateHeader();
            }
            else if (e.line[0] == '00' && e.line[2] == '0b3a' && e.line[4].match(/.*を倒した。$/)) {
                ddManager.countKill += 1;
                ddManager.updateHeader();
            }
        });
        startOverlayEvents();

        function showtraplist(traps) {
            var trapDIV = document.querySelector('#traplist');
            if (trapDIV) {
                trapDIV.innerText = JSON.stringify(traps, null, 4);
            }
        }


    </script>
</head>
<body>

    <div id="ddHeader"></div>
    <canvas id="canvas" width="300" height="300">
        No data to show.
    </canvas>
    <div id="ddFooter"></div>
    <!--div id="traplist"></div-->
    <!--pre id="encounter">
    </pre-->

</body>
</html>
